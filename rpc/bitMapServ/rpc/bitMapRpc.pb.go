// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.0
// source: bitMapRpc.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 留存类型(0:日期为截止日,1:日期为开始日)
type RpcSingleRequest_DataType int32

const (
	RpcSingleRequest_END   RpcSingleRequest_DataType = 0
	RpcSingleRequest_START RpcSingleRequest_DataType = 1
)

// Enum value maps for RpcSingleRequest_DataType.
var (
	RpcSingleRequest_DataType_name = map[int32]string{
		0: "END",
		1: "START",
	}
	RpcSingleRequest_DataType_value = map[string]int32{
		"END":   0,
		"START": 1,
	}
)

func (x RpcSingleRequest_DataType) Enum() *RpcSingleRequest_DataType {
	p := new(RpcSingleRequest_DataType)
	*p = x
	return p
}

func (x RpcSingleRequest_DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RpcSingleRequest_DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_bitMapRpc_proto_enumTypes[0].Descriptor()
}

func (RpcSingleRequest_DataType) Type() protoreflect.EnumType {
	return &file_bitMapRpc_proto_enumTypes[0]
}

func (x RpcSingleRequest_DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RpcSingleRequest_DataType.Descriptor instead.
func (RpcSingleRequest_DataType) EnumDescriptor() ([]byte, []int) {
	return file_bitMapRpc_proto_rawDescGZIP(), []int{0, 0}
}

// 留存类型(0:日期为截止日,1:日期为开始日)
type RpcMulitRequest_DataType int32

const (
	RpcMulitRequest_END   RpcMulitRequest_DataType = 0
	RpcMulitRequest_START RpcMulitRequest_DataType = 1
)

// Enum value maps for RpcMulitRequest_DataType.
var (
	RpcMulitRequest_DataType_name = map[int32]string{
		0: "END",
		1: "START",
	}
	RpcMulitRequest_DataType_value = map[string]int32{
		"END":   0,
		"START": 1,
	}
)

func (x RpcMulitRequest_DataType) Enum() *RpcMulitRequest_DataType {
	p := new(RpcMulitRequest_DataType)
	*p = x
	return p
}

func (x RpcMulitRequest_DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RpcMulitRequest_DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_bitMapRpc_proto_enumTypes[1].Descriptor()
}

func (RpcMulitRequest_DataType) Type() protoreflect.EnumType {
	return &file_bitMapRpc_proto_enumTypes[1]
}

func (x RpcMulitRequest_DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RpcMulitRequest_DataType.Descriptor instead.
func (RpcMulitRequest_DataType) EnumDescriptor() ([]byte, []int) {
	return file_bitMapRpc_proto_rawDescGZIP(), []int{1, 0}
}

// 留存类型(0:日期为截止日,1:日期为开始日)
type RpcMulitChannelsRequest_DataType int32

const (
	RpcMulitChannelsRequest_END   RpcMulitChannelsRequest_DataType = 0
	RpcMulitChannelsRequest_START RpcMulitChannelsRequest_DataType = 1
)

// Enum value maps for RpcMulitChannelsRequest_DataType.
var (
	RpcMulitChannelsRequest_DataType_name = map[int32]string{
		0: "END",
		1: "START",
	}
	RpcMulitChannelsRequest_DataType_value = map[string]int32{
		"END":   0,
		"START": 1,
	}
)

func (x RpcMulitChannelsRequest_DataType) Enum() *RpcMulitChannelsRequest_DataType {
	p := new(RpcMulitChannelsRequest_DataType)
	*p = x
	return p
}

func (x RpcMulitChannelsRequest_DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RpcMulitChannelsRequest_DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_bitMapRpc_proto_enumTypes[2].Descriptor()
}

func (RpcMulitChannelsRequest_DataType) Type() protoreflect.EnumType {
	return &file_bitMapRpc_proto_enumTypes[2]
}

func (x RpcMulitChannelsRequest_DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RpcMulitChannelsRequest_DataType.Descriptor instead.
func (RpcMulitChannelsRequest_DataType) EnumDescriptor() ([]byte, []int) {
	return file_bitMapRpc_proto_rawDescGZIP(), []int{2, 0}
}

type RpcSingleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date       string                    `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"` // 查询日期
	Type       RpcSingleRequest_DataType `protobuf:"varint,2,opt,name=type,proto3,enum=rpc.RpcSingleRequest_DataType" json:"type,omitempty"`
	Day        int32                     `protobuf:"varint,3,opt,name=day,proto3" json:"day,omitempty"`                                // 第几日留存
	Channel    string                    `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel,omitempty"`                         // 渠道名
	Role       string                    `protobuf:"bytes,5,opt,name=role,proto3" json:"role,omitempty"`                               // 身份类型 (0:普通用户,1:主播)
	DataSource string                    `protobuf:"bytes,6,opt,name=data_source,json=dataSource,proto3" json:"data_source,omitempty"` // 数据源
}

func (x *RpcSingleRequest) Reset() {
	*x = RpcSingleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitMapRpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcSingleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcSingleRequest) ProtoMessage() {}

func (x *RpcSingleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitMapRpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcSingleRequest.ProtoReflect.Descriptor instead.
func (*RpcSingleRequest) Descriptor() ([]byte, []int) {
	return file_bitMapRpc_proto_rawDescGZIP(), []int{0}
}

func (x *RpcSingleRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *RpcSingleRequest) GetType() RpcSingleRequest_DataType {
	if x != nil {
		return x.Type
	}
	return RpcSingleRequest_END
}

func (x *RpcSingleRequest) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *RpcSingleRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *RpcSingleRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *RpcSingleRequest) GetDataSource() string {
	if x != nil {
		return x.DataSource
	}
	return ""
}

type RpcMulitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date       string                   `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"` // 查询日期
	Type       RpcMulitRequest_DataType `protobuf:"varint,2,opt,name=type,proto3,enum=rpc.RpcMulitRequest_DataType" json:"type,omitempty"`
	Days       []int32                  `protobuf:"varint,3,rep,packed,name=days,proto3" json:"days,omitempty"`                       // 多天 留存天集合
	Channel    string                   `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel,omitempty"`                         // 渠道名
	Role       string                   `protobuf:"bytes,5,opt,name=role,proto3" json:"role,omitempty"`                               // 身份类型 (0:普通用户,1:主播)
	DataSource string                   `protobuf:"bytes,6,opt,name=data_source,json=dataSource,proto3" json:"data_source,omitempty"` // 数据源
}

func (x *RpcMulitRequest) Reset() {
	*x = RpcMulitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitMapRpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcMulitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcMulitRequest) ProtoMessage() {}

func (x *RpcMulitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitMapRpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcMulitRequest.ProtoReflect.Descriptor instead.
func (*RpcMulitRequest) Descriptor() ([]byte, []int) {
	return file_bitMapRpc_proto_rawDescGZIP(), []int{1}
}

func (x *RpcMulitRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *RpcMulitRequest) GetType() RpcMulitRequest_DataType {
	if x != nil {
		return x.Type
	}
	return RpcMulitRequest_END
}

func (x *RpcMulitRequest) GetDays() []int32 {
	if x != nil {
		return x.Days
	}
	return nil
}

func (x *RpcMulitRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *RpcMulitRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *RpcMulitRequest) GetDataSource() string {
	if x != nil {
		return x.DataSource
	}
	return ""
}

type RpcMulitChannelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date       string                           `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"` // 查询日期
	Type       RpcMulitChannelsRequest_DataType `protobuf:"varint,2,opt,name=type,proto3,enum=rpc.RpcMulitChannelsRequest_DataType" json:"type,omitempty"`
	Days       []int32                          `protobuf:"varint,3,rep,packed,name=days,proto3" json:"days,omitempty"`                       // 多天 留存天集合
	Channels   []string                         `protobuf:"bytes,4,rep,name=channels,proto3" json:"channels,omitempty"`                       // 多渠道
	Role       string                           `protobuf:"bytes,5,opt,name=role,proto3" json:"role,omitempty"`                               // 身份类型 (0:普通用户,1:主播)
	DataSource string                           `protobuf:"bytes,6,opt,name=data_source,json=dataSource,proto3" json:"data_source,omitempty"` // 数据源
}

func (x *RpcMulitChannelsRequest) Reset() {
	*x = RpcMulitChannelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitMapRpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcMulitChannelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcMulitChannelsRequest) ProtoMessage() {}

func (x *RpcMulitChannelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitMapRpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcMulitChannelsRequest.ProtoReflect.Descriptor instead.
func (*RpcMulitChannelsRequest) Descriptor() ([]byte, []int) {
	return file_bitMapRpc_proto_rawDescGZIP(), []int{2}
}

func (x *RpcMulitChannelsRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *RpcMulitChannelsRequest) GetType() RpcMulitChannelsRequest_DataType {
	if x != nil {
		return x.Type
	}
	return RpcMulitChannelsRequest_END
}

func (x *RpcMulitChannelsRequest) GetDays() []int32 {
	if x != nil {
		return x.Days
	}
	return nil
}

func (x *RpcMulitChannelsRequest) GetChannels() []string {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *RpcMulitChannelsRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *RpcMulitChannelsRequest) GetDataSource() string {
	if x != nil {
		return x.DataSource
	}
	return ""
}

type RpcErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                      // 业务码
	Msg     string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`                         // 业务提示
	ErrorNo int32  `protobuf:"varint,3,opt,name=error_no,json=errorNo,proto3" json:"error_no,omitempty"` // 错误码
}

func (x *RpcErrorResponse) Reset() {
	*x = RpcErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitMapRpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcErrorResponse) ProtoMessage() {}

func (x *RpcErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitMapRpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcErrorResponse.ProtoReflect.Descriptor instead.
func (*RpcErrorResponse) Descriptor() ([]byte, []int) {
	return file_bitMapRpc_proto_rawDescGZIP(), []int{3}
}

func (x *RpcErrorResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RpcErrorResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RpcErrorResponse) GetErrorNo() int32 {
	if x != nil {
		return x.ErrorNo
	}
	return 0
}

type KeeperStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keep     string `protobuf:"bytes,1,opt,name=keep,proto3" json:"keep,omitempty"`          // string `json:"keep" desc:"留存"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`          // string `json:"name" desc:"留存描述"`
	Register int64  `protobuf:"varint,3,opt,name=register,proto3" json:"register,omitempty"` // int    `json:"total" desc:"开始时间注册量"`
	Left     int64  `protobuf:"varint,4,opt,name=left,proto3" json:"left,omitempty"`         // int    `json:"left" desc:"当天留存量"`
}

func (x *KeeperStruct) Reset() {
	*x = KeeperStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitMapRpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeeperStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeeperStruct) ProtoMessage() {}

func (x *KeeperStruct) ProtoReflect() protoreflect.Message {
	mi := &file_bitMapRpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeeperStruct.ProtoReflect.Descriptor instead.
func (*KeeperStruct) Descriptor() ([]byte, []int) {
	return file_bitMapRpc_proto_rawDescGZIP(), []int{4}
}

func (x *KeeperStruct) GetKeep() string {
	if x != nil {
		return x.Keep
	}
	return ""
}

func (x *KeeperStruct) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KeeperStruct) GetRegister() int64 {
	if x != nil {
		return x.Register
	}
	return 0
}

func (x *KeeperStruct) GetLeft() int64 {
	if x != nil {
		return x.Left
	}
	return 0
}

type RpcChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel string          `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"` //string          `json:"channel" desc:"渠道名"`
	Items   []*KeeperStruct `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`     //[]*KeeperStruct `json:"items" desc:"结果集合"`
}

func (x *RpcChannelResponse) Reset() {
	*x = RpcChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitMapRpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcChannelResponse) ProtoMessage() {}

func (x *RpcChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitMapRpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcChannelResponse.ProtoReflect.Descriptor instead.
func (*RpcChannelResponse) Descriptor() ([]byte, []int) {
	return file_bitMapRpc_proto_rawDescGZIP(), []int{5}
}

func (x *RpcChannelResponse) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *RpcChannelResponse) GetItems() []*KeeperStruct {
	if x != nil {
		return x.Items
	}
	return nil
}

type RpcSingleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                      // 业务码
	Msg     string        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`                         // 业务提示
	ErrorNo int32         `protobuf:"varint,3,opt,name=error_no,json=errorNo,proto3" json:"error_no,omitempty"` // 错误码
	Data    *KeeperStruct `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`                       //结果数据"
}

func (x *RpcSingleResponse) Reset() {
	*x = RpcSingleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitMapRpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcSingleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcSingleResponse) ProtoMessage() {}

func (x *RpcSingleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitMapRpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcSingleResponse.ProtoReflect.Descriptor instead.
func (*RpcSingleResponse) Descriptor() ([]byte, []int) {
	return file_bitMapRpc_proto_rawDescGZIP(), []int{6}
}

func (x *RpcSingleResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RpcSingleResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RpcSingleResponse) GetErrorNo() int32 {
	if x != nil {
		return x.ErrorNo
	}
	return 0
}

func (x *RpcSingleResponse) GetData() *KeeperStruct {
	if x != nil {
		return x.Data
	}
	return nil
}

type RpcMulitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                      // 业务码
	Msg     string          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`                         // 业务提示
	ErrorNo int32           `protobuf:"varint,3,opt,name=error_no,json=errorNo,proto3" json:"error_no,omitempty"` // 错误码
	Data    []*KeeperStruct `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`                       //结果数据
}

func (x *RpcMulitResponse) Reset() {
	*x = RpcMulitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitMapRpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcMulitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcMulitResponse) ProtoMessage() {}

func (x *RpcMulitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitMapRpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcMulitResponse.ProtoReflect.Descriptor instead.
func (*RpcMulitResponse) Descriptor() ([]byte, []int) {
	return file_bitMapRpc_proto_rawDescGZIP(), []int{7}
}

func (x *RpcMulitResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RpcMulitResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RpcMulitResponse) GetErrorNo() int32 {
	if x != nil {
		return x.ErrorNo
	}
	return 0
}

func (x *RpcMulitResponse) GetData() []*KeeperStruct {
	if x != nil {
		return x.Data
	}
	return nil
}

type RpcMulitChannelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                      // 业务码
	Msg     string                `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`                         // 业务提示
	ErrorNo int32                 `protobuf:"varint,3,opt,name=error_no,json=errorNo,proto3" json:"error_no,omitempty"` // 错误码
	Data    []*RpcChannelResponse `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`                       //结果集合
}

func (x *RpcMulitChannelsResponse) Reset() {
	*x = RpcMulitChannelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitMapRpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcMulitChannelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcMulitChannelsResponse) ProtoMessage() {}

func (x *RpcMulitChannelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitMapRpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcMulitChannelsResponse.ProtoReflect.Descriptor instead.
func (*RpcMulitChannelsResponse) Descriptor() ([]byte, []int) {
	return file_bitMapRpc_proto_rawDescGZIP(), []int{8}
}

func (x *RpcMulitChannelsResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RpcMulitChannelsResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RpcMulitChannelsResponse) GetErrorNo() int32 {
	if x != nil {
		return x.ErrorNo
	}
	return 0
}

func (x *RpcMulitChannelsResponse) GetData() []*RpcChannelResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // 时间戳
	Ack       int32 `protobuf:"varint,2,opt,name=ack,proto3" json:"ack,omitempty"`             // 回答id
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitMapRpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitMapRpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_bitMapRpc_proto_rawDescGZIP(), []int{9}
}

func (x *PingRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PingRequest) GetAck() int32 {
	if x != nil {
		return x.Ack
	}
	return 0
}

type PingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // 时间戳
	Ack       int32 `protobuf:"varint,2,opt,name=ack,proto3" json:"ack,omitempty"`             // 回答id
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitMapRpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitMapRpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_bitMapRpc_proto_rawDescGZIP(), []int{10}
}

func (x *PingResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PingResponse) GetAck() int32 {
	if x != nil {
		return x.Ack
	}
	return 0
}

var File_bitMapRpc_proto protoreflect.FileDescriptor

var file_bitMapRpc_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x62, 0x69, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x72, 0x70, 0x63, 0x22, 0xdb, 0x01, 0x0a, 0x10, 0x52, 0x70, 0x63, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x22, 0x1e, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x07, 0x0a, 0x03, 0x45, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x10, 0x01, 0x22, 0xdb, 0x01, 0x0a, 0x0f, 0x52, 0x70, 0x63, 0x4d, 0x75, 0x6c, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x70, 0x63, 0x4d, 0x75, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x64,
	0x61, 0x79, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x22, 0x1e, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07,
	0x0a, 0x03, 0x45, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x10, 0x01, 0x22, 0xed, 0x01, 0x0a, 0x17, 0x52, 0x70, 0x63, 0x4d, 0x75, 0x6c, 0x69, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x4d, 0x75, 0x6c, 0x69, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x79,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x22, 0x1e, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07,
	0x0a, 0x03, 0x45, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x10, 0x01, 0x22, 0x53, 0x0a, 0x10, 0x52, 0x70, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4e, 0x6f, 0x22, 0x66, 0x0a, 0x0c, 0x4b, 0x65, 0x65, 0x70, 0x65,
	0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x65, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x65, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x65, 0x66, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x22,
	0x57, 0x0a, 0x12, 0x52, 0x70, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x27, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x7b, 0x0a, 0x11, 0x52, 0x70, 0x63, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4e, 0x6f, 0x12, 0x25,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7a, 0x0a, 0x10, 0x52, 0x70, 0x63, 0x4d, 0x75, 0x6c, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4e, 0x6f, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4b,
	0x65, 0x65, 0x70, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x88, 0x01, 0x0a, 0x18, 0x52, 0x70, 0x63, 0x4d, 0x75, 0x6c, 0x69, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4e, 0x6f, 0x12,
	0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3d, 0x0a, 0x0b,
	0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x22, 0x3e, 0x0a, 0x0c, 0x50,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x32, 0x8e, 0x02, 0x0a, 0x0a,
	0x42, 0x69, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x72, 0x76, 0x12, 0x2d, 0x0a, 0x04, 0x50, 0x69,
	0x6e, 0x67, 0x12, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0a, 0x55, 0x73, 0x65,
	0x72, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70,
	0x63, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72,
	0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x73, 0x12, 0x14, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70,
	0x63, 0x4d, 0x75, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x4d, 0x75, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x4d, 0x75, 0x6c, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x70, 0x63, 0x4d, 0x75, 0x6c, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x10, 0x5a, 0x0e,
	0x62, 0x69, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x72, 0x76, 0x2f, 0x72, 0x70, 0x63, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bitMapRpc_proto_rawDescOnce sync.Once
	file_bitMapRpc_proto_rawDescData = file_bitMapRpc_proto_rawDesc
)

func file_bitMapRpc_proto_rawDescGZIP() []byte {
	file_bitMapRpc_proto_rawDescOnce.Do(func() {
		file_bitMapRpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_bitMapRpc_proto_rawDescData)
	})
	return file_bitMapRpc_proto_rawDescData
}

var file_bitMapRpc_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_bitMapRpc_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_bitMapRpc_proto_goTypes = []interface{}{
	(RpcSingleRequest_DataType)(0),        // 0: rpc.RpcSingleRequest.DataType
	(RpcMulitRequest_DataType)(0),         // 1: rpc.RpcMulitRequest.DataType
	(RpcMulitChannelsRequest_DataType)(0), // 2: rpc.RpcMulitChannelsRequest.DataType
	(*RpcSingleRequest)(nil),              // 3: rpc.RpcSingleRequest
	(*RpcMulitRequest)(nil),               // 4: rpc.RpcMulitRequest
	(*RpcMulitChannelsRequest)(nil),       // 5: rpc.RpcMulitChannelsRequest
	(*RpcErrorResponse)(nil),              // 6: rpc.RpcErrorResponse
	(*KeeperStruct)(nil),                  // 7: rpc.KeeperStruct
	(*RpcChannelResponse)(nil),            // 8: rpc.RpcChannelResponse
	(*RpcSingleResponse)(nil),             // 9: rpc.RpcSingleResponse
	(*RpcMulitResponse)(nil),              // 10: rpc.RpcMulitResponse
	(*RpcMulitChannelsResponse)(nil),      // 11: rpc.RpcMulitChannelsResponse
	(*PingRequest)(nil),                   // 12: rpc.PingRequest
	(*PingResponse)(nil),                  // 13: rpc.PingResponse
}
var file_bitMapRpc_proto_depIdxs = []int32{
	0,  // 0: rpc.RpcSingleRequest.type:type_name -> rpc.RpcSingleRequest.DataType
	1,  // 1: rpc.RpcMulitRequest.type:type_name -> rpc.RpcMulitRequest.DataType
	2,  // 2: rpc.RpcMulitChannelsRequest.type:type_name -> rpc.RpcMulitChannelsRequest.DataType
	7,  // 3: rpc.RpcChannelResponse.items:type_name -> rpc.KeeperStruct
	7,  // 4: rpc.RpcSingleResponse.data:type_name -> rpc.KeeperStruct
	7,  // 5: rpc.RpcMulitResponse.data:type_name -> rpc.KeeperStruct
	8,  // 6: rpc.RpcMulitChannelsResponse.data:type_name -> rpc.RpcChannelResponse
	12, // 7: rpc.BitMapServ.Ping:input_type -> rpc.PingRequest
	3,  // 8: rpc.BitMapServ.UserKeeper:input_type -> rpc.RpcSingleRequest
	4,  // 9: rpc.BitMapServ.UserKeepers:input_type -> rpc.RpcMulitRequest
	5,  // 10: rpc.BitMapServ.ChannelsUserKeepers:input_type -> rpc.RpcMulitChannelsRequest
	13, // 11: rpc.BitMapServ.Ping:output_type -> rpc.PingResponse
	9,  // 12: rpc.BitMapServ.UserKeeper:output_type -> rpc.RpcSingleResponse
	10, // 13: rpc.BitMapServ.UserKeepers:output_type -> rpc.RpcMulitResponse
	11, // 14: rpc.BitMapServ.ChannelsUserKeepers:output_type -> rpc.RpcMulitChannelsResponse
	11, // [11:15] is the sub-list for method output_type
	7,  // [7:11] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_bitMapRpc_proto_init() }
func file_bitMapRpc_proto_init() {
	if File_bitMapRpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bitMapRpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcSingleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitMapRpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcMulitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitMapRpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcMulitChannelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitMapRpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitMapRpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeeperStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitMapRpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitMapRpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcSingleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitMapRpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcMulitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitMapRpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcMulitChannelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitMapRpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitMapRpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bitMapRpc_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bitMapRpc_proto_goTypes,
		DependencyIndexes: file_bitMapRpc_proto_depIdxs,
		EnumInfos:         file_bitMapRpc_proto_enumTypes,
		MessageInfos:      file_bitMapRpc_proto_msgTypes,
	}.Build()
	File_bitMapRpc_proto = out.File
	file_bitMapRpc_proto_rawDesc = nil
	file_bitMapRpc_proto_goTypes = nil
	file_bitMapRpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BitMapServClient is the client API for BitMapServ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BitMapServClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	UserKeeper(ctx context.Context, in *RpcSingleRequest, opts ...grpc.CallOption) (*RpcSingleResponse, error)
	UserKeepers(ctx context.Context, in *RpcMulitRequest, opts ...grpc.CallOption) (*RpcMulitResponse, error)
	ChannelsUserKeepers(ctx context.Context, in *RpcMulitChannelsRequest, opts ...grpc.CallOption) (*RpcMulitChannelsResponse, error)
}

type bitMapServClient struct {
	cc grpc.ClientConnInterface
}

func NewBitMapServClient(cc grpc.ClientConnInterface) BitMapServClient {
	return &bitMapServClient{cc}
}

func (c *bitMapServClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/rpc.BitMapServ/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bitMapServClient) UserKeeper(ctx context.Context, in *RpcSingleRequest, opts ...grpc.CallOption) (*RpcSingleResponse, error) {
	out := new(RpcSingleResponse)
	err := c.cc.Invoke(ctx, "/rpc.BitMapServ/UserKeeper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bitMapServClient) UserKeepers(ctx context.Context, in *RpcMulitRequest, opts ...grpc.CallOption) (*RpcMulitResponse, error) {
	out := new(RpcMulitResponse)
	err := c.cc.Invoke(ctx, "/rpc.BitMapServ/UserKeepers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bitMapServClient) ChannelsUserKeepers(ctx context.Context, in *RpcMulitChannelsRequest, opts ...grpc.CallOption) (*RpcMulitChannelsResponse, error) {
	out := new(RpcMulitChannelsResponse)
	err := c.cc.Invoke(ctx, "/rpc.BitMapServ/ChannelsUserKeepers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BitMapServServer is the server API for BitMapServ service.
type BitMapServServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	UserKeeper(context.Context, *RpcSingleRequest) (*RpcSingleResponse, error)
	UserKeepers(context.Context, *RpcMulitRequest) (*RpcMulitResponse, error)
	ChannelsUserKeepers(context.Context, *RpcMulitChannelsRequest) (*RpcMulitChannelsResponse, error)
}

// UnimplementedBitMapServServer can be embedded to have forward compatible implementations.
type UnimplementedBitMapServServer struct {
}

func (*UnimplementedBitMapServServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedBitMapServServer) UserKeeper(context.Context, *RpcSingleRequest) (*RpcSingleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserKeeper not implemented")
}
func (*UnimplementedBitMapServServer) UserKeepers(context.Context, *RpcMulitRequest) (*RpcMulitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserKeepers not implemented")
}
func (*UnimplementedBitMapServServer) ChannelsUserKeepers(context.Context, *RpcMulitChannelsRequest) (*RpcMulitChannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsUserKeepers not implemented")
}

func RegisterBitMapServServer(s *grpc.Server, srv BitMapServServer) {
	s.RegisterService(&_BitMapServ_serviceDesc, srv)
}

func _BitMapServ_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BitMapServServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.BitMapServ/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BitMapServServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BitMapServ_UserKeeper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcSingleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BitMapServServer).UserKeeper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.BitMapServ/UserKeeper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BitMapServServer).UserKeeper(ctx, req.(*RpcSingleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BitMapServ_UserKeepers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcMulitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BitMapServServer).UserKeepers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.BitMapServ/UserKeepers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BitMapServServer).UserKeepers(ctx, req.(*RpcMulitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BitMapServ_ChannelsUserKeepers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcMulitChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BitMapServServer).ChannelsUserKeepers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.BitMapServ/ChannelsUserKeepers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BitMapServServer).ChannelsUserKeepers(ctx, req.(*RpcMulitChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BitMapServ_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.BitMapServ",
	HandlerType: (*BitMapServServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _BitMapServ_Ping_Handler,
		},
		{
			MethodName: "UserKeeper",
			Handler:    _BitMapServ_UserKeeper_Handler,
		},
		{
			MethodName: "UserKeepers",
			Handler:    _BitMapServ_UserKeepers_Handler,
		},
		{
			MethodName: "ChannelsUserKeepers",
			Handler:    _BitMapServ_ChannelsUserKeepers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bitMapRpc.proto",
}
