// Code generated by goctl. DO NOT EDIT!
// Source: bitMapRpc.proto

//go:generate mockgen -destination ./bitmapserv_mock.go -package bitmapserv -source $GOFILE

package bitmapserv

import (
	"context"

	"github.com/weblfe/bitmap_service/rpc/bitMapServ/rpc"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	RpcMulitResponse         = rpc.RpcMulitResponse
	RpcMulitChannelsResponse = rpc.RpcMulitChannelsResponse
	PingRequest              = rpc.PingRequest
	PingResponse             = rpc.PingResponse
	RpcErrorResponse         = rpc.RpcErrorResponse
	KeeperStruct             = rpc.KeeperStruct
	RpcMulitChannelsRequest  = rpc.RpcMulitChannelsRequest
	RpcChannelResponse       = rpc.RpcChannelResponse
	RpcSingleResponse        = rpc.RpcSingleResponse
	RpcSingleRequest         = rpc.RpcSingleRequest
	RpcMulitRequest          = rpc.RpcMulitRequest

	BitMapServ interface {
		Ping(ctx context.Context, in *PingRequest) (*PingResponse, error)
		UserKeeper(ctx context.Context, in *RpcSingleRequest) (*RpcSingleResponse, error)
		UserKeepers(ctx context.Context, in *RpcMulitRequest) (*RpcMulitResponse, error)
		ChannelsUserKeepers(ctx context.Context, in *RpcMulitChannelsRequest) (*RpcMulitChannelsResponse, error)
	}

	defaultBitMapServ struct {
		cli zrpc.Client
	}
)

func NewBitMapServ(cli zrpc.Client) BitMapServ {
	return &defaultBitMapServ{
		cli: cli,
	}
}

func (m *defaultBitMapServ) Ping(ctx context.Context, in *PingRequest) (*PingResponse, error) {
	client := rpc.NewBitMapServClient(m.cli.Conn())
	return client.Ping(ctx, in)
}

func (m *defaultBitMapServ) UserKeeper(ctx context.Context, in *RpcSingleRequest) (*RpcSingleResponse, error) {
	client := rpc.NewBitMapServClient(m.cli.Conn())
	return client.UserKeeper(ctx, in)
}

func (m *defaultBitMapServ) UserKeepers(ctx context.Context, in *RpcMulitRequest) (*RpcMulitResponse, error) {
	client := rpc.NewBitMapServClient(m.cli.Conn())
	return client.UserKeepers(ctx, in)
}

func (m *defaultBitMapServ) ChannelsUserKeepers(ctx context.Context, in *RpcMulitChannelsRequest) (*RpcMulitChannelsResponse, error) {
	client := rpc.NewBitMapServClient(m.cli.Conn())
	return client.ChannelsUserKeepers(ctx, in)
}
