// Code generated by goctl. DO NOT EDIT!
// Source: bitMapRpc.proto

package bitmapserv

import (
	"context"

	"rpc/pb"

	"github.com/tal-tech/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	KeeperStruct             = pb.KeeperStruct
	PingRequest              = pb.PingRequest
	PingResponse             = pb.PingResponse
	RpcChannelResponse       = pb.RpcChannelResponse
	RpcErrorResponse         = pb.RpcErrorResponse
	RpcMulitChannelsRequest  = pb.RpcMulitChannelsRequest
	RpcMulitChannelsResponse = pb.RpcMulitChannelsResponse
	RpcMulitRequest          = pb.RpcMulitRequest
	RpcMulitResponse         = pb.RpcMulitResponse
	RpcSingleRequest         = pb.RpcSingleRequest
	RpcSingleResponse        = pb.RpcSingleResponse

	BitMapServ interface {
		Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
		UserKeeper(ctx context.Context, in *RpcSingleRequest, opts ...grpc.CallOption) (*RpcSingleResponse, error)
		UserKeepers(ctx context.Context, in *RpcMulitRequest, opts ...grpc.CallOption) (*RpcMulitResponse, error)
		ChannelsUserKeepers(ctx context.Context, in *RpcMulitChannelsRequest, opts ...grpc.CallOption) (*RpcMulitChannelsResponse, error)
	}

	defaultBitMapServ struct {
		cli zrpc.Client
	}
)

func NewBitMapServ(cli zrpc.Client) BitMapServ {
	return &defaultBitMapServ{
		cli: cli,
	}
}

func (m *defaultBitMapServ) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	client := pb.NewBitMapServClient(m.cli.Conn())
	return client.Ping(ctx, in, opts...)
}

func (m *defaultBitMapServ) UserKeeper(ctx context.Context, in *RpcSingleRequest, opts ...grpc.CallOption) (*RpcSingleResponse, error) {
	client := pb.NewBitMapServClient(m.cli.Conn())
	return client.UserKeeper(ctx, in, opts...)
}

func (m *defaultBitMapServ) UserKeepers(ctx context.Context, in *RpcMulitRequest, opts ...grpc.CallOption) (*RpcMulitResponse, error) {
	client := pb.NewBitMapServClient(m.cli.Conn())
	return client.UserKeepers(ctx, in, opts...)
}

func (m *defaultBitMapServ) ChannelsUserKeepers(ctx context.Context, in *RpcMulitChannelsRequest, opts ...grpc.CallOption) (*RpcMulitChannelsResponse, error) {
	client := pb.NewBitMapServClient(m.cli.Conn())
	return client.ChannelsUserKeepers(ctx, in, opts...)
}
